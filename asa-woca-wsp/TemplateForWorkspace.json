{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "asa-woca-wsp"
		},
		"asa-woca-wsp-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asa-woca-wsp-WorkspaceDefaultSqlServer'"
		},
		"ls_waco_sql_db_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_waco_sql_db'"
		},
		"ls_woca_ldw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_woca_ldw'"
		},
		"asa-woca-wsp-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asawocastaccdl.dfs.core.windows.net"
		},
		"ls_woca_dl_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asawocastaccdl.dfs.core.windows.net/"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/pl_cov_parquet_to_delta_bronze')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "nb_tran_parquet_to_delta_bronze",
						"description": "Notebook transforms data in the bronze folder from parquet to delta",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "trans_bronze_parquet_to_delta",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "wocasparkpool",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"folder_path_data_folder_array_var": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "bronze",
								"data_folder": "Individual"
							},
							{
								"folder_path": "bronze",
								"data_folder": "FamilyMembership"
							},
							{
								"folder_path": "bronze",
								"data_folder": "Family"
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/trans_bronze_parquet_to_delta')]",
				"[concat(variables('workspaceId'), '/bigDataPools/wocasparkpool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_cov_parquet_to_delta_silver')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "nb_tran_parquet_to_delta_silver",
						"description": "Notebook transforms data in the  silver folder from parquet to delta",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "trans_silver_parquet_to_delta",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "wocasparkpool",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"folder_path_data_folder_array_var": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver",
								"data_folder": "Individual"
							},
							{
								"folder_path": "silver",
								"data_folder": "FamilyMembership"
							},
							{
								"folder_path": "silver",
								"data_folder": "Family"
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/trans_silver_parquet_to_delta')]",
				"[concat(variables('workspaceId'), '/bigDataPools/wocasparkpool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_gold_tbls')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "nb_create_gold_tbls",
						"description": "Notebook creates gold tables and transforms data in the gold folder from to delta",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "create_gold_tbls",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "wocasparkpool",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/create_gold_tbls')]",
				"[concat(variables('workspaceId'), '/bigDataPools/wocasparkpool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_tbls')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline first deletes all the listed file paths in the data lake silver path if they exist then it recreates the listed external tables which in turn recreates listed files in their subfolders within the silver path  ",
				"activities": [
					{
						"name": "ForEach Folder Path",
						"description": "For each of the listed 'folder_path' and 'usp_name' in the main 'folder_path_usp_name_array' variable we will perform a delete and procedure activity ",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('folder_path_usp_name_array')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Stored procedure",
									"description": "Creates dataset for the listed names in the silver path and create externa tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Silver Files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().usp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_woca_ldw",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Delete Silver Files",
									"description": "Delete all the listed files from the silver path in the data lake",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_waco_silver_delete_activity",
											"type": "DatasetReference",
											"parameters": {
												"folder_path_param": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"folder_path_usp_name_array": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/Individual",
								"usp_name": "silver.usp_silver_individual"
							},
							{
								"folder_path": "silver/FamilyMembership",
								"usp_name": "silver.usp_silver_family_membership"
							},
							{
								"folder_path": "silver/Family",
								"usp_name": "silver.usp_silver_family"
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_woca_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_waco_silver_delete_activity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_load_data_4m_db_2_dl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline loads the tables/views from  database into the data lake as well as the data inside the bronze folder in the data lake.",
				"activities": [
					{
						"name": "Lookup SQL Tables to Export",
						"description": "Looks up the database to select a list of tables/views from the dbo schema",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\n    s.name AS SchemaName,\n    t.name AS TableName\nFROM sys.tables t\nINNER JOIN sys.schemas s ON s.schema_id = t.schema_id\nWHERE s.name = 'dbo';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_woca_db_lookup_activity",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Table",
						"description": "For each of the output values ('SchemaName' and 'TableName') from the lookup table, perform two activities.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup SQL Tables to Export",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup SQL Tables to Export').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Copy data to Data Lake",
									"description": "Copy the data from database selected table/view to the data lake (source to sink).",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_waco_db_copy_activity",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@item().SchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_woca_dl",
											"type": "DatasetReference",
											"parameters": {
												"datalakefolder": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Create View",
									"description": "Calls a stored procedure 'bronze.usp_create_views' to generate views/tables in the data lake virtual warehouse. NOTE: data hast to be copied into the data lake before views/tables can be created.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data to Data Lake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[bronze].[usp_create_views]",
										"storedProcedureParameters": {
											"folder": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_woca_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "old"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-26T05:16:23Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_woca_db_lookup_activity')]",
				"[concat(variables('workspaceId'), '/datasets/ds_waco_db_copy_activity')]",
				"[concat(variables('workspaceId'), '/datasets/ds_woca_dl')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_woca_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_load_data_4m_db_2_dl_v1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline loads the tables/views from  database into the data lake as well as the data inside the bronze folder in the data lake.",
				"activities": [
					{
						"name": "Lookup SQL Tables to Export",
						"description": "Looks up the database to select a list of tables/views from the dbo schema",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\n    s.name AS SchemaName,\n    t.name AS TableName\nFROM sys.tables t\nINNER JOIN sys.schemas s ON s.schema_id = t.schema_id\nWHERE s.name = 'dbo';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_woca_db_lookup_activity",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Table",
						"description": "For each of the output values ('SchemaName' and 'TableName') from the lookup table, perform two activities.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup SQL Tables to Export",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup SQL Tables to Export').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "cp_data_dl",
									"description": "Copy the data from database selected table/view to the data lake (source to sink).",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_waco_db_copy_activity",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@item().SchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_woca_dl",
											"type": "DatasetReference",
											"parameters": {
												"datalakefolder": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "crt_vw_dlw",
									"description": "Calls a stored procedure 'bronze.usp_create_views' to create views/tables in the data lake virtual warehouse. NOTE: data hast to be copied into the data lake before views/tables can be created.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "cp_data_dl",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[bronze].[usp_create_views]",
										"storedProcedureParameters": {
											"folder": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_woca_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "old"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-26T05:16:23Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_woca_db_lookup_activity')]",
				"[concat(variables('workspaceId'), '/datasets/ds_waco_db_copy_activity')]",
				"[concat(variables('workspaceId'), '/datasets/ds_woca_dl')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_woca_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_load_data_4m_db_2_dl_v2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline loads the tables/views from  database into the data lake as well as the data inside the bronze folder in the data lake.",
				"activities": [
					{
						"name": "Lookup SQL Tables to Export",
						"description": "Looks up the database to select a list of tables/views from the dbo schema",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\n    s.name AS SchemaName,\n    t.name AS TableName\nFROM sys.tables t\nINNER JOIN sys.schemas s ON s.schema_id = t.schema_id\nWHERE s.name = 'dbo';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_woca_db_lookup_activity",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Table",
						"description": "For each of the output values ('SchemaName' and 'TableName') from the lookup table, perform two activities.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup SQL Tables to Export",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup SQL Tables to Export').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "cp_data_dl",
									"description": "Copy the data from database selected table/view to the data lake (source to sink).",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_waco_db_copy_activity",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@item().SchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_woca_dl",
											"type": "DatasetReference",
											"parameters": {
												"datalakefolder": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "crt_vw_dlw",
									"description": "Uses an SQL query to create views/tables in the data lake virtual warehouse. NOTE: data hast to be copied into the data lake before views/tables can be created.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "cp_data_dl",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_woca_ldw",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "DROP VIEW IF EXISTS bronze.vw_@{item().TableName};",
													"type": "Expression"
												}
											},
											{
												"type": "NonQuery",
												"text": {
													"value": "CREATE VIEW bronze.vw_@{item().TableName} AS SELECT * FROM \n        OPENROWSET(\n            BULK 'bronze/@{item().TableName}', \n            DATA_SOURCE = '@{pipeline().parameters.datasrc}', \n            FORMAT = 'DELTA' \n        ) AS [result];",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"datasrc": {
						"type": "string",
						"defaultValue": "woca_data_src"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-26T05:16:30Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_woca_db_lookup_activity')]",
				"[concat(variables('workspaceId'), '/datasets/ds_waco_db_copy_activity')]",
				"[concat(variables('workspaceId'), '/datasets/ds_woca_dl')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_woca_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_overall_execution')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline to extract data from db",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_load_data_4m_db_2_dl_v2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline to create silver tbls",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Convert Bronze Parquet to Delta Format",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_tbls",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Convert Bronze Parquet to Delta Format",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline to extract data from db",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_cov_parquet_to_delta_bronze",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Convert Silver Parquet to Delta Format",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline to create silver tbls",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_cov_parquet_to_delta_silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline to create gold tbls",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Convert Silver Parquet to Delta Format",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_gold_tbls",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_load_data_4m_db_2_dl_v2')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_tbls')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_cov_parquet_to_delta_bronze')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_cov_parquet_to_delta_silver')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_gold_tbls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_waco_db_copy_activity')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_waco_sql_db",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_waco_sql_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_waco_silver_delete_activity')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is the dataset that points to the silver path where we want to delete listed files in the data lake. We have also assigned dataset a folder_path_param parameter with no values because we want it to be updated with variables from other sources.",
				"linkedServiceName": {
					"referenceName": "ls_woca_dl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder_path_param": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folder_path_param",
							"type": "Expression"
						},
						"fileSystem": "woca-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_woca_dl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_woca_db_lookup_activity')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_waco_sql_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_waco_sql_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_woca_dl')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_woca_dl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"datalakefolder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "bronze/@{dataset().datalakefolder}",
							"type": "Expression"
						},
						"fileSystem": "woca-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_woca_dl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asa-woca-wsp-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('asa-woca-wsp-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asa-woca-wsp-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asa-woca-wsp-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_waco_sql_db')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_waco_sql_db_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_woca_dl')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_woca_dl_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_woca_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_woca_ldw_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadMe_1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_init"
				},
				"content": {
					"query": "/*\nStep 1: run 's1_woca_db_schemas' and 's2_create_external_data_source' to create the woca_ldw database (virtual wearhouse)\nStep 2: create a pipeline that fetches the data from the SQL server into our datalake\n- pipeline will also make use of the \"bronze.usp_create_views\" procedure to write views for each table under the bronze schema\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadMe_2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_bronze"
				},
				"content": {
					"query": "/*\nThis is the procedure that the Stored procedure in the 'Pipelines/old/pl_load_data_4m_SQL_2_dl_v1' pipeline \ncalls in order to create views in the data lake gen2 virtual data wearhouse\n\nNOTE: \nFORMAT = ''PARQUET''\nFORMAT = ''DELTA''\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadMe_3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3_silver"
				},
				"content": {
					"query": "/*\n\nPerformed some column renaming for readability and datatypes adjustment to improve cost and performance \n\nstrategy, decision whanau journey\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadMe_3_1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3_silver/3_1_views"
				},
				"content": {
					"query": "/*\nWe can create a dynamic PIPELINE that will create (individual, family_membership and family) SILVER VIES\n- However, we will be creating EXTERNAL TABLES in '3_2_ext_tbl' and using them\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadMe_4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4_gold"
				},
				"content": {
					"query": "/*\nMerges Individual to Family using the FamilyMembership table\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadMe_4_2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3_silver/3_2_ext_tbl"
				},
				"content": {
					"query": "/*\nCreate stored procedure\nthat will use CETAS to create external tables for each of the procedures\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadMe_4_3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3_silver/3_3_udp"
				},
				"content": {
					"query": "/*\n1st Create stored procedure that will use CETAS to create external tables for each of the procedures\n2nd run each procedure before we can use them\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "5_others"
				},
				"content": {
					"query": "USE woca_ldw_spark\n\nSELECT * FROM dbo.individualagegroupcount\n\nDROP EXTERNAL TABLE individualagegroupcount;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw_spark",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT *\n FROM [woca_ldw_spark].[dbo].[fam_prim_cont]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw_spark",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s1_create_vws_usp')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_bronze"
				},
				"content": {
					"query": "USE woca_ldw\nGO\n\nCREATE OR ALTER PROCEDURE bronze.usp_create_views \n@folder NVARCHAR(100)\nAS\nBEGIN\n\n    DECLARE @create_view_sql_stmt NVARCHAR(MAX);\n\n    SET @create_view_sql_stmt = \n        'CREATE VIEW bronze.vw_'+ @folder + '\n            AS\n            SELECT\n            *\n            FROM\n                OPENROWSET(\n                    BULK ''bronze/' + @folder + '/**'',\n                    DATA_SOURCE = ''woca_data_src'',\n                    FORMAT = ''DELTA''\n                ) AS [result]'\n    print(@create_view_sql_stmt)\n    EXEC sp_executesql @create_view_sql_stmt;\n\nEND;\n\n-- Then use a Stored Procedure in the Pipeline to call this procedure",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s1_create_woca_db_schemas')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_init"
				},
				"content": {
					"query": "USE master\nGO\n\nCREATE DATABASE woca_ldw\nGO\n\nALTER DATABASE woca_ldw COLLATE Latin1_General_100_BIN2_UTF8\nGO\n\nUSE woca_ldw\nGO\n\nCREATE SCHEMA bronze\nGO\n\nCREATE SCHEMA silver\nGO\n\nCREATE SCHEMA gold\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s1_explore_individual')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_bronze/explore"
				},
				"content": {
					"query": "\nUSE woca_ldw\nGO\n\n-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'bronze/Individual/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) AS [result]\nGO\n\n--Explore the datatypes and column_ordinals\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''bronze/Individual/'',\n        DATA_SOURCE = ''woca_data_src'',\n        FORMAT = ''DELTA''\n    ) AS [result]'\nGO\n\n\n\n-- Chech the maximum length of some columns\n/*\nMAX(LEN(contactid)),\nMAX(LEN(mag_agegroupidname)),\nMAX(LEN(gendercodelabel)),\nMAX(LEN(mag_tribeprimaryidname)),\nMAX(LEN(mag_tribeprimaryidname)),\nMAX(LEN(mag_phoregistered)),\nMAX(LEN(mag_ethnicityprimaryid)),\nMAX(LEN(mag_physicaldisability)),\nMAX(LEN(statuscodelabel)),\n*/\nSELECT\n    MAX(LEN(statuscodelabel)) AS MAX_LEN\nFROM\n    OPENROWSET(\n        BULK 'bronze/Individual/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) AS [result]\nGO\n\n\n-- Select specific columns\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/Individual/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        individual_id VARCHAR(50) 77,\n        age_group_name VARCHAR(50) 61,\n        gender_code_label VARCHAR(50) 69,\n        date_of_birth VARCHAR(50) 103,\n        tribe_primary_name VARCHAR(100) 90,\n        pho_registered BIT 157,\n        primary_ethnicity VARCHAR(50) 46,\n        physical_disability BIT 81,\n        status_code_label VARCHAR(20) 22\n    ) AS [individuals]\nGO\n\n\n-- Select specific columns where age_group_name is not null\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/Individual/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        individual_id VARCHAR(50) 77,\n        age_group_name VARCHAR(50) 61,\n        gender_code_label VARCHAR(50) 69,\n        date_of_birth VARCHAR(50) 103,\n        tribe_primary_name VARCHAR(100) 90,\n        pho_registered BIT 157,\n        primary_ethnicity VARCHAR(50) 46,\n        physical_disability BIT 81,\n        status_code_label VARCHAR(20) 22\n    ) AS [individuals]\nWHERE age_group_name IS NOT NULL\nGO\n\n\n-- Count the number of records 8634\nSELECT\n    COUNT(1) AS TOTAL\nFROM\n    OPENROWSET(\n        BULK 'bronze/Individual/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        individual_id VARCHAR(50) 77,\n        age_group_name VARCHAR(50) 61,\n        gender_code_label VARCHAR(50) 69,\n        date_of_birth VARCHAR(50) 103,\n        tribe_primary_name VARCHAR(100) 90,\n        pho_registered BIT 157,\n        primary_ethnicity VARCHAR(50) 46,\n        physical_disability BIT 81,\n        status_code_label VARCHAR(20) 22\n    ) AS [individuals]\nGO\n\n-- Count the number of records when age_group_name is null 8547\nSELECT\n    COUNT(1) AS TOTAL\nFROM\n    OPENROWSET(\n        BULK 'bronze/Individual/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        individual_id VARCHAR(50) 77,\n        age_group_name VARCHAR(50) 61,\n        gender_code_label VARCHAR(50) 69,\n        date_of_birth VARCHAR(50) 103,\n        tribe_primary_name VARCHAR(100) 90,\n        pho_registered BIT 157,\n        primary_ethnicity VARCHAR(50) 46,\n        physical_disability BIT 81,\n        status_code_label VARCHAR(20) 22\n    ) AS [individuals]\nWHERE age_group_name IS NOT NULL\nGO\n\n\n\n\n\n\n-- Remove rows with the null in any of the listed columns\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/Individual/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        individual_id VARCHAR(50) 77,\n        age_group_name VARCHAR(50) 61,\n        gender_code_label VARCHAR(50) 69,\n        date_of_birth VARCHAR(50) 103,\n        tribe_primary_name VARCHAR(100) 90,\n        pho_registered BIT 157,\n        primary_ethnicity VARCHAR(50) 46,\n        physical_disability BIT 81,\n        status_code_label VARCHAR(20) 22\n    ) AS [individuals]\nWHERE \n    age_group_name IS NOT NULL AND\n    gender_code_label IS NOT NULL AND\n    date_of_birth IS NOT NULL AND\n    tribe_primary_name IS NOT NULL AND\n    primary_ethnicity IS NOT NULL\nGO\n\n-- Remove rows with the null in any of the listed columns COUNT: 4725\nSELECT\n    COUNT(1) AS TOTAL\nFROM\n    OPENROWSET(\n        BULK 'bronze/Individual/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        individual_id VARCHAR(50) 77,\n        age_group_name VARCHAR(50) 61,\n        gender_code_label VARCHAR(50) 69,\n        date_of_birth VARCHAR(50) 103,\n        tribe_primary_name VARCHAR(100) 90,\n        pho_registered BIT 157,\n        primary_ethnicity VARCHAR(50) 46,\n        physical_disability BIT 81,\n        status_code_label VARCHAR(20) 22\n    ) AS [individuals]\nWHERE \n    age_group_name IS NOT NULL AND\n    gender_code_label IS NOT NULL AND\n    date_of_birth IS NOT NULL AND\n    tribe_primary_name IS NOT NULL AND\n    primary_ethnicity IS NOT NULL\nGO\n\n\n\n\n\n-- Remove rows with the null in all of the listed columns\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/Individual/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        individual_id VARCHAR(50) 77,\n        age_group_name VARCHAR(50) 61,\n        gender_code_label VARCHAR(50) 69,\n        date_of_birth VARCHAR(50) 103,\n        tribe_primary_name VARCHAR(100) 90,\n        pho_registered BIT 157,\n        primary_ethnicity VARCHAR(50) 46,\n        physical_disability BIT 81,\n        status_code_label VARCHAR(20) 22\n    ) AS [individuals]\nWHERE \n    age_group_name IS NOT NULL OR\n    gender_code_label IS NOT NULL OR\n    date_of_birth IS NOT NULL OR\n    tribe_primary_name IS NOT NULL OR\n    primary_ethnicity IS NOT NULL\nGO\n\n-- Remove rows with the null in all of the listed columns COUNT: 8605\nSELECT\n    COUNT(1) AS TOTAL\nFROM\n    OPENROWSET(\n        BULK 'bronze/Individual/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        individual_id VARCHAR(50) 77,\n        age_group_name VARCHAR(50) 61,\n        gender_code_label VARCHAR(50) 69,\n        date_of_birth VARCHAR(50) 103,\n        tribe_primary_name VARCHAR(100) 90,\n        pho_registered BIT 157,\n        primary_ethnicity VARCHAR(50) 46,\n        physical_disability BIT 81,\n        status_code_label VARCHAR(20) 22\n    ) AS [individuals]\nWHERE \n    age_group_name IS NOT NULL OR\n    gender_code_label IS NOT NULL OR\n    date_of_birth IS NOT NULL OR\n    tribe_primary_name IS NOT NULL OR\n    primary_ethnicity IS NOT NULL\nGO\n\n\n/*\n===============USE THIS TO CREATE SILVER VIEW==========\n*/\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/Individual/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        individual_id VARCHAR(50) 77,\n        age_group_name VARCHAR(50) 61,\n        gender_code_label VARCHAR(50) 69,\n        date_of_birth VARCHAR(50) 103,\n        tribe_primary_name VARCHAR(100) 90,\n        pho_registered BIT 157,\n        primary_ethnicity VARCHAR(50) 46,\n        physical_disability BIT 81,\n        status_code_label VARCHAR(20) 22\n    ) AS [individuals]\nWHERE \n    age_group_name IS NOT NULL OR\n    gender_code_label IS NOT NULL OR\n    date_of_birth IS NOT NULL OR\n    tribe_primary_name IS NOT NULL OR\n    primary_ethnicity IS NOT NULL\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s1_explore_merge_individual_family_vws')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3_silver/3_1_views/explore"
				},
				"content": {
					"query": "-- 1. switch to use woca_ldw\nUSE woca_ldw\nGO \n\n--1a. perform join on family family membership and family\nSELECT \n    i.*, fm.*, f.*\nFROM silver.vw_individual i\nLEFT JOIN silver.vw_family_membership fm ON (i.individual_id = fm.individual)\nLEFT JOIN silver.vw_family f ON (f.family_id = fm.family);\n\n\n\n--1b count items after the join operation\nSELECT \n    COUNT(1) AS totals\nFROM silver.vw_individual i\nLEFT JOIN silver.vw_family_membership fm ON (i.individual_id = fm.individual)\nLEFT JOIN silver.vw_family f ON (f.family_id = fm.family);\n\n\n-- 1c. count how many individuals/family were assigned a primart contact\nSELECT\n    f.primary_contact,\n    COUNT(1) AS totals\nFROM silver.vw_individual i\nJOIN silver.vw_family_membership fm ON (i.individual_id = fm.individual)\nJOIN silver.vw_family f ON (f.family_id = fm.family)\nGROUP BY f.primary_contact\nORDER BY totals DESC;\n\n-- 2c. remove the null values\nSELECT\n    f.primary_contact,\n    COUNT(1) AS totals\nFROM silver.vw_individual i\nJOIN silver.vw_family_membership fm ON (i.individual_id = fm.individual)\nJOIN silver.vw_family f ON (f.family_id = fm.family)\nWHERE f.primary_contact IS NOT NULL\nGROUP BY f.primary_contact\nORDER BY totals DESC;\n\n\n--3c get the distinct counts of individuals/family were assigned primart contacts\nSELECT\n    DISTINCT(COUNT(1)) AS primary_contact_assi\nFROM silver.vw_individual i\nJOIN silver.vw_family_membership fm ON (i.individual_id = fm.individual)\nJOIN silver.vw_family f ON (f.family_id = fm.family)\nWHERE f.primary_contact IS NOT NULL\nGROUP BY f.primary_contact\nORDER BY primary_contact_assi DESC;\n\n--1d count the number of individuals that belong to each family relationship\n--Qn: where is the dict for (family_relationship)\nSELECT\n    fm.family_relationship,\n    COUNT(1) AS totals\nFROM silver.vw_individual i\nJOIN silver.vw_family_membership fm ON (i.individual_id = fm.individual)\nJOIN silver.vw_family f ON (f.family_id = fm.family)\nWHERE fm.family_relationship IS NOT NULL\nGROUP BY fm.family_relationship\nORDER BY totals DESC;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s1_family_ext_tbl')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3_silver/3_2_ext_tbl"
				},
				"content": {
					"query": "-- CREATE EXTERNAL TABLES AS SELECT (CETAS)\n--- We are just transforming table/view to select only the columns we need\n\nUSE woca_ldw;\n\nIF OBJECT_ID('silver.Family') IS NOT NULL\n    DROP EXTERNAL TABLE silver.Family\nGO\n\nCREATE EXTERNAL TABLE silver.Family\n    WITH\n    (\n        DATA_SOURCE = woca_data_src,\n        LOCATION = 'silver/Family',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\n--SELECT * FROM bronze.vw_Family;\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/Family/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        family_id VARCHAR(50) 64,\n        primary_contact VARCHAR(50) 46,\n        postcode VARCHAR(15) 9,\n        city VARCHAR(50) 32,\n        state_code_label VARCHAR(20) 39\n    ) AS [family]\nGO\n\n\n SELECT * FROM silver.Family;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s1_family_membership_usp')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3_silver/3_3_udp"
				},
				"content": {
					"query": "USE woca_ldw\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_family_membership\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.FamilyMembership') IS NOT NULL\n    DROP EXTERNAL TABLE silver.FamilyMembership\n\n    CREATE EXTERNAL TABLE silver.FamilyMembership\n        WITH\n        (\n            DATA_SOURCE = woca_data_src,\n            LOCATION = 'silver/FamilyMembership',\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT\n        *\n    FROM\n        OPENROWSET(\n            BULK 'bronze/FamilyMembership/*.parquet',\n            DATA_SOURCE = 'woca_data_src',\n            FORMAT = 'PARQUET'\n        ) WITH (\n            family_membership_id VARCHAR(50) 15,\n            individual VARCHAR(50) 25,\n            family VARCHAR(50) 10,\n            primary_contact VARCHAR(10) 17,\n            family_relationship VARCHAR(20) 4,\n            family_relationship_label VARCHAR(20) 5\n        ) AS [familyMembership];\n\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s1_individual_vw')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3_silver/3_1_views"
				},
				"content": {
					"query": "-- 1. switch to use woca_ldw\nUSE woca_ldw\nGO \n\n-- 2.) Drop view for trip_data_green if it already exist\nDROP VIEW IF EXISTS silver.vw_individual\nGO\n\n-- 3.) Create view for trip_data_green\nCREATE VIEW silver.vw_individual\nAS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/Individual/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        individual_id VARCHAR(50) 77,\n        age_group_name VARCHAR(50) 61,\n        gender_code_label VARCHAR(50) 69,\n        date_of_birth VARCHAR(50) 103,\n        tribe_primary_name VARCHAR(100) 90,\n        pho_registered BIT 157,\n        primary_ethnicity VARCHAR(50) 46,\n        physical_disability BIT 81,\n        status_code_label VARCHAR(20) 22\n    ) AS [individuals]\nWHERE \n    age_group_name IS NOT NULL OR\n    gender_code_label IS NOT NULL OR\n    date_of_birth IS NOT NULL OR\n    tribe_primary_name IS NOT NULL OR\n    primary_ethnicity IS NOT NULL\nGO\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s2_create_external_data_source')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_init"
				},
				"content": {
					"query": "-- Switch to the right database\nUSE woca_ldw\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'woca_data_src')\n\n    -- Create External Data Source\n    CREATE EXTERNAL DATA SOURCE woca_data_src \n    WITH (\n        LOCATION = 'abfss://woca-data@asawocastaccdl.dfs.core.windows.net'\n        \n    )\n    GO\n\n\n---DROP EXTERNAL DATA SOURCE woca_data_src",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s2_explore_family')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_bronze/explore"
				},
				"content": {
					"query": "\nUSE woca_ldw\nGO\n\n-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'bronze/Family/*.parquet',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) AS [result]\nGO\n\n--Explore the datatypes and column_ordinals\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''bronze/Family/*.parquet'',\n        DATA_SOURCE = ''woca_data_src'',\n        FORMAT = ''DELTA''\n    ) AS [result]'\nGO\n\n\n\n-- Chech the maximum length of some columns\n/*\nMAX(LEN(mag_familygroupid)),\nMAX(LEN(mag_primarycontact)),\nMAX(LEN(mag_physical_postcode)),\nMAX(LEN(mag_physical_city)),\nMAX(LEN(statecodelabel))\n*/\nSELECT\n    MAX(LEN(statecodelabel)) AS MAX_LEN\nFROM\n    OPENROWSET(\n        BULK 'bronze/Family/*.parquet',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) AS [result]\nGO\n\nSELECT\n    mag_familygroupid,\n    mag_primarycontact,\n    mag_physical_postcode,\n    mag_physical_city\nFROM\n    OPENROWSET(\n        BULK 'bronze/Family/*.parquet',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) AS [result]\nGO\n\n-- Select specific columns\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/Family/*.parquet',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        family_id VARCHAR(50) 64,\n        primary_contact VARCHAR(50) 46,\n        postcode VARCHAR(15) 9,\n        city VARCHAR(50) 32,\n        state_code_label VARCHAR(20) 39\n    ) AS [family]\nGO\n\n\n-- Select specific columns where age_group_name is not null\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/Family/*.parquet',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        family_id VARCHAR(50) 64,\n        primary_contact VARCHAR(50) 46,\n        postcode VARCHAR(15) 9,\n        city VARCHAR(50) 32,\n        state_code_label VARCHAR(20) 39\n    ) AS [family]\nWHERE family_id IS NOT NULL\nGO\n\n\n-- Count the number of records 8634\nSELECT\n    COUNT(1) AS TOTAL\nFROM\n    OPENROWSET(\n        BULK 'bronze/Family/*.parquet',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        family_id VARCHAR(50) 64,\n        primary_contact VARCHAR(50) 46,\n        postcode VARCHAR(15) 9,\n        city VARCHAR(50) 32,\n        state_code_label VARCHAR(20) 39\n    ) AS [family]\nGO\n\n\n/*\n===============USE THIS TO CREATE SILVER VIEW==========\n*/\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/Family/*.parquet',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        family_id VARCHAR(50) 64,\n        primary_contact VARCHAR(50) 46,\n        postcode VARCHAR(15) 9,\n        city VARCHAR(50) 32,\n        state_code_label VARCHAR(20) 39\n    ) AS [family]\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s2_family_membership_ext_tbl')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3_silver/3_2_ext_tbl"
				},
				"content": {
					"query": "-- CREATE EXTERNAL TABLES AS SELECT (CETAS)\n--- We are just transforming table/view to select only the columns we need\n\nUSE woca_ldw;\n\nIF OBJECT_ID('silver.FamilyMembership') IS NOT NULL\n    DROP EXTERNAL TABLE silver.FamilyMembership\nGO\n\nCREATE EXTERNAL TABLE silver.FamilyMembership\n    WITH\n    (\n        DATA_SOURCE = woca_data_src,\n        LOCATION = 'silver/FamilyMembership',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\n--SELECT * FROM bronze.vw_FamilyMembership;\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/FamilyMembership/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        family_membership_id VARCHAR(50) 15,\n        individual VARCHAR(50) 25,\n        family VARCHAR(50) 10,\n        assigned BIT 17, -- assigned prymary contact\n        family_relationship VARCHAR(20) 4,\n        family_relationship_label VARCHAR(20) 5\n    ) AS [familyMembership]\nGO\n\n\nSELECT * FROM silver.FamilyMembership;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s2_family_usp')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3_silver/3_3_udp"
				},
				"content": {
					"query": "USE woca_ldw\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_family\nAS\nBEGIN\n\n        IF OBJECT_ID('silver.Family') IS NOT NULL\n        DROP EXTERNAL TABLE silver.Family\n\n    CREATE EXTERNAL TABLE silver.Family\n        WITH\n        (\n            DATA_SOURCE = woca_data_src,\n            LOCATION = 'silver/Family',\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT\n        *\n    FROM\n        OPENROWSET(\n            BULK 'bronze/Family/*.parquet',\n            DATA_SOURCE = 'woca_data_src',\n            FORMAT = 'PARQUET'\n        ) WITH (\n            family_id VARCHAR(50) 64,\n            primary_contact VARCHAR(50) 46,\n            postcode VARCHAR(15) 9,\n            city VARCHAR(50) 32,\n            state_code_label VARCHAR(20) 39\n        ) AS [family];\n\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s2_family_vw')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3_silver/3_1_views"
				},
				"content": {
					"query": "-- 1. switch to use woca_ldw\nUSE woca_ldw\nGO \n\n-- 2.) Drop view for trip_data_green if it already exist\nDROP VIEW IF EXISTS silver.vw_family\nGO\n\n-- 3.) Create view for trip_data_green\nCREATE VIEW silver.vw_family\nAS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/Family/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        family_id VARCHAR(50) 64,\n        primary_contact VARCHAR(50) 46,\n        postcode VARCHAR(15) 9,\n        city VARCHAR(50) 32,\n        state_code_label VARCHAR(20) 39\n    ) AS [family]\nGO\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s3_create_external_file_formats')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_init"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n\n/*\nCSV EXTERNAL FILE FORMATS\n==========================\n*/\n--1a. Create file format csv_file_format for parser version 2.0\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='csv_file_format_pv2')\n  CREATE EXTERNAL FILE FORMAT csv_file_format_pv2  \n  WITH (  \n      FORMAT_TYPE = DELIMITEDTEXT,\n      FORMAT_OPTIONS (  \n        FIELD_TERMINATOR = ','  \n      , STRING_DELIMITER = '\"'\n      , First_Row = 2\n      , USE_TYPE_DEFAULT = FALSE \n      , Encoding = 'UTF8'\n      , PARSER_VERSION = '2.0' )   \n      );  \n\n--DROP EXTERNAL FILE FORMAT csv_file_format_v2\n\n--2a Create file format csv_file_format_pv1 for parser version 1.0\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='csv_file_format_pv1')\n  CREATE EXTERNAL FILE FORMAT csv_file_format_pv1 \n  WITH (  \n      FORMAT_TYPE = DELIMITEDTEXT,\n      FORMAT_OPTIONS (  \n        FIELD_TERMINATOR = ','  \n      , STRING_DELIMITER = '\"'\n      , First_Row = 2\n      , USE_TYPE_DEFAULT = FALSE \n      , Encoding = 'UTF8'\n      , PARSER_VERSION = '1.0' )   \n      );  \n\n\n/*\nTSV EXTERNAL FILE FORMATS\n==========================\n*/\n--1b. Create file format tsv_file_format for parser version 2.0\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='tsv_file_format_pv2')\n  CREATE EXTERNAL FILE FORMAT tsv_file_format_pv2  \n  WITH (  \n      FORMAT_TYPE = DELIMITEDTEXT,\n      FORMAT_OPTIONS (  \n        FIELD_TERMINATOR = '\\t'  \n      , STRING_DELIMITER = '\"'\n      , First_Row = 2\n      , USE_TYPE_DEFAULT = FALSE \n      , Encoding = 'UTF8'\n      , PARSER_VERSION = '2.0' )   \n      );  \n\n--2b. Create file format tsv_file_format for parser version 1.0\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='tsv_file_format_pv1')\n  CREATE EXTERNAL FILE FORMAT tsv_file_format_pv1 \n  WITH (  \n      FORMAT_TYPE = DELIMITEDTEXT,\n      FORMAT_OPTIONS (  \n        FIELD_TERMINATOR = '\\t'  \n      , STRING_DELIMITER = '\"'\n      , First_Row = 2\n      , USE_TYPE_DEFAULT = FALSE \n      , Encoding = 'UTF8'\n      , PARSER_VERSION = '1.0' )   \n      );  \n\n\n\n/*\nPARQUET EXTERNAL FILE FORMATS\n=============================\n*/\n--1c. Create external file format for parquet_file_format\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='parquet_file_format')\n  CREATE EXTERNAL FILE FORMAT parquet_file_format  \n  WITH (  \n        FORMAT_TYPE = PARQUET,  \n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n       ); \n\n\n\n/*\nDELTA EXTERNAL FILE FORMATS\n===========================\n*/\n--1d. Create external file format for delta_file_format\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='delta_file_format')\n  CREATE EXTERNAL FILE FORMAT delta_file_format  \n  WITH (  \n        FORMAT_TYPE = DELTA,  \n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n       ); \n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s3_explore_family_membership')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_bronze/explore"
				},
				"content": {
					"query": "\nUSE woca_ldw\nGO\n\n-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'bronze/FamilyMembership/*.parquet',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) AS [result]\nGO\n\n--Explore the datatypes and column_ordinals\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''bronze/FamilyMembership/*.parquet'',\n        DATA_SOURCE = ''woca_data_src'',\n        FORMAT = ''DELTA''\n    ) AS [result]'\nGO\n\n\n\n-- Chech the maximum length of some columns\n/*\nMAX(LEN(mag_familygroupmembershipid)),\nMAX(LEN(mag_individual)),\nMAX(LEN(mag_familygroup)),\nMAX(LEN(mag_primarycontact)),\nMAX(LEN(mag_familygrouprelationship)),\nMAX(LEN(mag_familygrouprelationshiplabel))\n*/\nSELECT\n    MAX(LEN(mag_familygrouprelationshiplabel)) AS MAX_LEN\nFROM\n    OPENROWSET(\n        BULK 'bronze/FamilyMembership/*.parquet',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) AS [result]\nGO\n\nSELECT\n    mag_familygroupmembershipid,\n    mag_individual,\n    mag_familygroup,\n    mag_primarycontact,\n    mag_familygrouprelationship,\n    mag_familygrouprelationshiplabel\nFROM\n    OPENROWSET(\n        BULK 'bronze/FamilyMembership/*.parquet',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) AS [result]\nGO\n\n-- Select specific columns\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/FamilyMembership/*.parquet',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        family_membership_id VARCHAR(50) 15,\n        individual VARCHAR(50) 25,\n        family VARCHAR(50) 10,\n        assigned BIT 17, -- assigned_primary_contact\n        family_relationship VARCHAR(20) 4,\n        family_relationship_label VARCHAR(20) 5\n    ) AS [familyMember]\nGO\n\n\n-- Select specific columns where age_group_name is not null\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/FamilyMembership/*.parquet',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        family_membership_id VARCHAR(50) 15,\n        individual VARCHAR(50) 25,\n        family VARCHAR(50) 10,\n        assigned BIT 17, -- assigned_primary_contact\n        family_relationship VARCHAR(20) 4,\n        family_relationship_label VARCHAR(20) 5\n    ) AS [familyMember]\nWHERE family_id IS NOT NULL\nGO\n\n\n-- Count the number of records 8634\nSELECT\n    COUNT(1) AS TOTAL\nFROM\n    OPENROWSET(\n        BULK 'bronze/FamilyMembership/*.parquet',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        family_membership_id VARCHAR(50) 15,\n        individual VARCHAR(50) 25,\n        family VARCHAR(50) 10,\n        assigned BIT 17, -- assigned_primary_contact\n        family_relationship VARCHAR(20) 4,\n        family_relationship_label VARCHAR(20) 5\n    ) AS [familyMember]\nGO\n\n\n/*\n===============USE THIS TO CREATE SILVER VIEW==========\n*/\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/FamilyMembership/*.parquet',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        family_membership_id VARCHAR(50) 15,\n        individual VARCHAR(50) 25,\n        family VARCHAR(50) 10,\n        assigned BIT 17, -- assigned_primary_contact\n        family_relationship VARCHAR(20) 4,\n        family_relationship_label VARCHAR(20) 5\n    ) AS [familyMember]\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s3_family_membership_vw')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3_silver/3_1_views"
				},
				"content": {
					"query": "-- 1. switch to use woca_ldw\nUSE woca_ldw\nGO \n\n-- 2.) Drop view for trip_data_green if it already exist\nDROP VIEW IF EXISTS silver.vw_family_membership\nGO\n\n-- 3.) Create view for trip_data_green\nCREATE VIEW silver.vw_family_membership\nAS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/FamilyMembership/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        family_membership_id VARCHAR(50) 15,\n        individual VARCHAR(50) 25,\n        family VARCHAR(50) 10,\n        assigned BIT 17, -- assigned prymary contact\n        family_relationship VARCHAR(20) 4,\n        family_relationship_label VARCHAR(20) 5\n    ) AS [familyMember]\nGO\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s3_individual_ext_tbl')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3_silver/3_2_ext_tbl"
				},
				"content": {
					"query": "-- CREATE EXTERNAL TABLES AS SELECT (CETAS)\n--- We are just transforming table/view to select only the columns we need\n\nUSE woca_ldw;\n\nIF OBJECT_ID('silver.Individual') IS NOT NULL\n    DROP EXTERNAL TABLE silver.Individual\nGO\n\nCREATE EXTERNAL TABLE silver.Individual\n    WITH\n    (\n        DATA_SOURCE = woca_data_src,\n        LOCATION = 'silver/Individual',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\n--SELECT * FROM bronze.vw_Individual;\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'bronze/Individual/',\n        DATA_SOURCE = 'woca_data_src',\n        FORMAT = 'DELTA'\n    ) WITH (\n        individual_id VARCHAR(50) 77,\n        age_group_name VARCHAR(50) 61,\n        gender_code_label VARCHAR(50) 69,\n        date_of_birth VARCHAR(50) 103,\n        tribe_primary_name VARCHAR(100) 90,\n        pho_registered BIT 157,\n        primary_ethnicity VARCHAR(50) 46,\n        physical_disability BIT 81,\n        status_code_label VARCHAR(20) 22\n    ) AS [individuals]\nWHERE \n    age_group_name IS NOT NULL OR\n    gender_code_label IS NOT NULL OR\n    date_of_birth IS NOT NULL OR\n    tribe_primary_name IS NOT NULL OR\n    primary_ethnicity IS NOT NULL\nGO\n\n\n\nSELECT * FROM silver.Individual;\n\n--DROP EXTERNAL TABLE silver.individual;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s3_individual_usp')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3_silver/3_3_udp"
				},
				"content": {
					"query": "USE woca_ldw\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_individual\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.Individual') IS NOT NULL\n    DROP EXTERNAL TABLE silver.Individual;\n\n    CREATE EXTERNAL TABLE silver.Individual\n        WITH\n        (\n            DATA_SOURCE = woca_data_src,\n            LOCATION = 'silver/Individual',\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT\n        *\n    FROM\n        OPENROWSET(\n            BULK 'bronze/Individual/*.parquet',\n            DATA_SOURCE = 'woca_data_src',\n            FORMAT = 'PARQUET'\n        ) WITH (\n            individual_id VARCHAR(50) 77,\n            age_group_name VARCHAR(50) 61,\n            gender_code_label VARCHAR(50) 69,\n            date_of_birth VARCHAR(50) 103,\n            tribe_primary_name VARCHAR(100) 90,\n            pho_registered BIT 157,\n            primary_ethnicity VARCHAR(50) 46,\n            physical_disability BIT 81,\n            status_code_label VARCHAR(20) 22\n        ) AS [individuals]\n    WHERE \n        age_group_name IS NOT NULL OR\n        gender_code_label IS NOT NULL OR\n        date_of_birth IS NOT NULL OR\n        tribe_primary_name IS NOT NULL OR\n        primary_ethnicity IS NOT NULL;\n\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s4_1_explore_individuals')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4_gold/explore"
				},
				"content": {
					"query": "-- 1. switch to use woca_ldw\nUSE woca_ldw\nGO \n\n--1a. What are the individual age groups Counts\nSELECT \n    age_group_name,\n    COUNT(age_group_name) AS totals\nFROM silver.Individual\nWHERE age_group_name IS NOT NULL\nGROUP BY age_group_name\nORDER BY totals DESC;\n\n\n--*****Question: where is the dictionary/lookup to primary ethnicity\n--2a. What are the Primary ethnicities\nSELECT \n    primary_ethnicity,\n    COUNT(primary_ethnicity) AS totals\nFROM silver.Individual\nWHERE primary_ethnicity IS NOT NULL\nGROUP BY primary_ethnicity\nORDER BY totals DESC;\n\n--2b. What are the top 10 Primary ethnicities\nSELECT TOP 10\n    primary_ethnicity,\n    COUNT(primary_ethnicity) AS totals\nFROM silver.Individual\nWHERE primary_ethnicity IS NOT NULL\nGROUP BY primary_ethnicity\nORDER BY totals DESC;\n\n\n\n--3a. What are the primary tribes\nSELECT \n    tribe_primary_name,\n    COUNT(tribe_primary_name) AS totals\nFROM silver.Individual\nWHERE tribe_primary_name IS NOT NULL\nGROUP BY tribe_primary_name\nORDER BY totals DESC;\n\n\n--3b. What are the top 10 primary tribes\nSELECT TOP 10\n    tribe_primary_name,\n    COUNT(tribe_primary_name) AS totals\nFROM silver.Individual\nWHERE tribe_primary_name IS NOT NULL\nGROUP BY tribe_primary_name\nORDER BY totals DESC;\n\n\n--4a. What os the proportion of Physicaly challenged with non-physicaly challenged\nSELECT \n    physical_disability,\n    COUNT(physical_disability) AS totals\nFROM silver.Individual\nWHERE physical_disability IS NOT NULL\nGROUP BY physical_disability\nORDER BY totals DESC;\n\n--4B. How many individuals are physicaly challenged\nSELECT \n    physical_disability,\n    COUNT(physical_disability) AS totals\nFROM silver.Individual\nWHERE physical_disability IS NOT NULL\nAND physical_disability = 1\nGROUP BY physical_disability\nORDER BY totals DESC;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s4_1_individual_age_grp_cnt_ext_tbl')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4_gold"
				},
				"content": {
					"query": "-- CREATE EXTERNAL TABLES AS SELECT (CETAS)\n\nUSE woca_ldw\nGO \n\nIF OBJECT_ID('gold.IndividualAgeGroupCount') IS NOT NULL\n    DROP EXTERNAL TABLE gold.IndividualAgeGroupCount\nGO\n\nCREATE EXTERNAL TABLE gold.IndividualAgeGroupCount\n    WITH\n    (\n        DATA_SOURCE = woca_data_src,\n        LOCATION = 'gold/IndividualAgeGroupCount',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT \n    age_group_name AS age_groups,\n    COUNT(age_group_name) AS counts\nFROM silver.Individual\nWHERE age_group_name IS NOT NULL\nGROUP BY age_group_name\nORDER BY counts DESC;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s4_2_explore_families')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4_gold/explore"
				},
				"content": {
					"query": "-- 1. switch to use woca_ldw\nUSE woca_ldw\nGO \n\n--1a. count the cities where families hail\nSELECT \n    city,\n    COUNT(city) AS totals\nFROM silver.Family\nWHERE city IS NOT NULL\nGROUP BY city\nORDER BY totals DESC;\n\n\n--2a. count the cities where families hail\n-- replace families come from a particular city\n-- it might be better to do this in python\nSELECT\n    REPLACE(city, '[,]', '') AS cities,\n    COUNT(city) AS totals\nFROM silver.Family\nWHERE city IS NOT NULL\nGROUP BY city\nORDER BY totals DESC;\n\n--3a. top 10 cities where families hail\nSELECT TOP 10\n    REPLACE(city, '[,]', '') AS cities,\n    COUNT(city) AS totals\nFROM silver.Family\nWHERE city IS NOT NULL\nGROUP BY city\nORDER BY totals DESC;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s4_2_family_top_cities')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4_gold"
				},
				"content": {
					"query": "-- CREATE EXTERNAL TABLES AS SELECT (CETAS)\n-- what are the top 10 cities where families hail\nUSE woca_ldw\nGO \n\nIF OBJECT_ID('gold.FamilyTopCities') IS NOT NULL\n    DROP EXTERNAL TABLE gold.FamilyTopCities\nGO\n\nCREATE EXTERNAL TABLE gold.FamilyTopCities\n    WITH\n    (\n        DATA_SOURCE = woca_data_src,\n        LOCATION = 'gold/FamilyTopCities',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT TOP 10\n    city AS cities,\n    COUNT(city) AS families\nFROM silver.Family\nWHERE city IS NOT NULL\nGROUP BY city\nORDER BY families DESC;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s4_3_explore_family_membership')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4_gold/explore"
				},
				"content": {
					"query": "-- 1. switch to use woca_ldw\nUSE woca_ldw\nGO \n\n--1a. what is the proportion of family memberships that where assigned vs unassigned\nSELECT \n    assigned,\n    COUNT(assigned) AS totals\nFROM silver.FamilyMembership\nWHERE assigned IS NOT NULL\nGROUP BY assigned\nORDER BY totals DESC;\n\n\n--1b. how many family memberships where assigned\nSELECT \n    assigned,\n    COUNT(assigned) AS totals\nFROM silver.FamilyMembership\nWHERE assigned IS NOT NULL\nAND assigned = 0\nGROUP BY assigned;\n\n--1c. how many family memberships where not assigned\nSELECT \n    assigned,\n    COUNT(assigned) AS totals\nFROM silver.FamilyMembership\nWHERE assigned IS NOT NULL\nAND assigned = 1\nGROUP BY assigned;\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s4_3_family_relationship_cnt_ext_tbl')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4_gold"
				},
				"content": {
					"query": "-- CREATE EXTERNAL TABLES AS SELECT (CETAS)\n-- How many individuals have the same family relationship ID?\n\nUSE woca_ldw\nGO \n\nIF OBJECT_ID('gold.FamilyRelationshipCount') IS NOT NULL\n    DROP EXTERNAL TABLE gold.FamilyRelationshipCount\nGO\n\nCREATE EXTERNAL TABLE gold.FamilyRelationshipCount\n    WITH\n    (\n        DATA_SOURCE = woca_data_src,\n        LOCATION = 'gold/FamilyRelationshipCount',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n    fm.family_relationship,\n    COUNT(1) AS Counts\nFROM silver.Individual i\nLEFT JOIN silver.FamilyMembership fm ON (i.individual_id = fm.individual)\nLEFT JOIN silver.Family f ON (f.family_id = fm.family)\nWHERE fm.family_relationship IS NOT NULL\nGROUP BY fm.family_relationship\nORDER BY Counts DESC;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s4_4_explore_individual_family_membership')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4_gold/explore"
				},
				"content": {
					"query": "-- 1. switch to use woca_ldw\nUSE woca_ldw\nGO \n\n--1a. How many primary_contact per family\nSELECT\n    DISTINCT(COUNT(1)) AS primary_contact_assi\nFROM silver.Family f\nWHERE f.primary_contact IS NOT NULL\nGROUP BY f.primary_contact\nORDER BY primary_contact_assi DESC;\n\n--2a. What is the distributions of FamilyMembership per individual in one primary contact?\nSELECT\n    DISTINCT(COUNT(fm.individual)) AS indiv_per_fam_count\nFROM silver.Individual i\nLEFT JOIN silver.FamilyMembership fm ON (i.individual_id = fm.individual)\nWHERE fm.individual IS NOT NULL\nGROUP BY  fm.individual\nORDER BY indiv_per_fam_count DESC;\n\n--2b. What are the distributions of FamilyMembership in one primary contact?\nSELECT DISTINCT(COUNT(1)) AS primary_contact_assi\nFROM silver.Family f\nLEFT JOIN silver.FamilyMembership fm ON (f.family_id = fm.family)\nWHERE f.primary_contact IS NOT NULL\nGROUP BY f.primary_contact\nORDER BY primary_contact_assi DESC;\n\n--2c. What are the top five distributions of FamilyMembership in one primary contact?\nSELECT \nDISTINCT TOP (5) (COUNT(1)) AS primary_contact_assi\nFROM silver.Family f\nLEFT JOIN silver.FamilyMembership fm ON (f.family_id = fm.family)\nWHERE f.primary_contact IS NOT NULL\nGROUP BY f.primary_contact\nORDER BY primary_contact_assi DESC;\n\n--3a. who are thoes individuals that do not have family members\nSELECT\n   fm.individual,\n   COUNT(fm.individual) AS indiv_per_fam_count\nFROM silver.Individual i\nLEFT JOIN silver.FamilyMembership fm ON (i.individual_id = fm.individual)\nWHERE fm.individual IS NOT NULL\nGROUP BY  fm.individual\nHAVING COUNT(fm.individual) < 1\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s4_4_primary_contact_dist_cnt_ext_tbl')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4_gold"
				},
				"content": {
					"query": "-- CREATE EXTERNAL TABLES AS SELECT (CETAS)\n-- What is the distribution of primart contact count\nUSE woca_ldw\nGO \n\nIF OBJECT_ID('gold.PrimaryContactDistCount') IS NOT NULL\n    DROP EXTERNAL TABLE gold.PrimaryContactDistCount\nGO\n\nCREATE EXTERNAL TABLE gold.PrimaryContactDistCount\n    WITH\n    (\n        DATA_SOURCE = woca_data_src,\n        LOCATION = 'gold/PrimaryContactDistCount',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n    DISTINCT(COUNT(1)) AS primary_contact_assi\nFROM silver.Individual i\nLEFT JOIN silver.FamilyMembership fm ON (i.individual_id = fm.individual)\nLEFT JOIN silver.Family f ON (f.family_id = fm.family)\nWHERE f.primary_contact IS NOT NULL\nGROUP BY f.primary_contact\nORDER BY primary_contact_assi DESC;\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s4_5_explore_individual_family_membership')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4_gold/explore"
				},
				"content": {
					"query": "-- 1. switch to use woca_ldw\nUSE woca_ldw\nGO \n\n--1a. perform join on individual, family and family membership\nSELECT \n    i.*, fm.*, f.*\nFROM silver.Individual i\nLEFT JOIN silver.FamilyMembership fm ON (i.individual_id = fm.individual)\nLEFT JOIN silver.Family f ON (f.family_id = fm.family);\n\n\n\n--2a. total number of records after the join operation \nSELECT \n    COUNT(1) AS totals\nFROM silver.Individual i\nLEFT JOIN silver.FamilyMembership fm ON (i.individual_id = fm.individual)\nLEFT JOIN silver.Family f ON (f.family_id = fm.family);\n\n\n-- 3a. count how many individuals/family were assigned a primart contact\nSELECT\n    f.primary_contact,\n    COUNT(1) AS totals\nFROM silver.Individual i\nLEFT JOIN silver.FamilyMembership fm ON (i.individual_id = fm.individual)\nLEFT JOIN silver.Family f ON (f.family_id = fm.family)\nGROUP BY f.primary_contact\nORDER BY totals DESC;\n\n\n-- 3b. remove the null values\nSELECT\n    f.primary_contact,\n    COUNT(1) AS totals\nFROM silver.Individual i\nLEFT JOIN silver.FamilyMembership fm ON (i.individual_id = fm.individual)\nLEFT JOIN silver.Family f ON (f.family_id = fm.family)\nWHERE f.primary_contact IS NOT NULL\nGROUP BY f.primary_contact\nORDER BY totals DESC;\n\n\n\n--3c how many distinct counts of individuals/family assignets to primart contacts\nSELECT\n    DISTINCT(COUNT(1)) AS primary_contact_assi\nFROM silver.Individual i\nLEFT JOIN silver.FamilyMembership fm ON (i.individual_id = fm.individual)\nLEFT JOIN silver.Family f ON (f.family_id = fm.family)\nWHERE f.primary_contact IS NOT NULL\nGROUP BY f.primary_contact\nORDER BY primary_contact_assi DESC;\n\n\n--4a. How many individuals have the same family relationship ID?\n--*****Qn: where is the dict for (family_relationship)\nSELECT\n    fm.family_relationship,\n    COUNT(1) AS totals\nFROM silver.Individual i\nLEFT JOIN silver.FamilyMembership fm ON (i.individual_id = fm.individual)\nLEFT JOIN silver.Family f ON (f.family_id = fm.family)\nWHERE fm.family_relationship IS NOT NULL\nGROUP BY fm.family_relationship\nORDER BY totals DESC;\n\n----- individuals\nSELECT\n    fm.family_relationship,\n    COUNT(1) AS totals\nFROM silver.Individual i\nLEFT JOIN silver.FamilyMembership fm ON (i.individual_id = fm.individual)\nWHERE fm.family_relationship IS NOT NULL\nGROUP BY fm.family_relationship\nORDER BY totals DESC;\n\n----- families---\nSELECT\n    fm.family_relationship,\n    COUNT(1) AS totals\nFROM silver.Family f\nLEFT JOIN silver.FamilyMembership fm ON (f.family_id = fm.family)\nWHERE fm.family_relationship IS NOT NULL\nGROUP BY fm.family_relationship\nORDER BY totals DESC;\n\n----\nSELECT\n    f.city,\n    COUNT(f.city) AS totals\nFROM silver.Individual i\nLEFT JOIN silver.FamilyMembership fm ON (i.individual_id = fm.individual)\nLEFT JOIN silver.Family f ON (f.family_id = fm.family)\nWHERE f.city IS NOT NULL\nGROUP BY i.individual_id, f.city\nORDER BY totals DESC;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s4_5_merge_individual_family_ext_tbls')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4_gold"
				},
				"content": {
					"query": "--perform join on family family membership and family\n-- merging Individuals to families\nUSE woca_ldw\nGO \n\nIF OBJECT_ID('gold.IndividualFamily') IS NOT NULL\n    DROP EXTERNAL TABLE gold.IndividualFamily\nGO\n\nCREATE EXTERNAL TABLE gold.IndividualFamily\n    WITH\n    (\n        DATA_SOURCE = woca_data_src,\n        LOCATION = 'gold/IndividualFamily',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT \n    i.*, fm.*, f.*\nFROM silver.Individual i\nLEFT JOIN silver.FamilyMembership fm ON (i.individual_id = fm.individual)\nLEFT JOIN silver.Family f ON (f.family_id = fm.family);\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "woca_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_gold_tbls')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "wocasparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "70b24081-7c5d-4062-b8b7-6dbf8862d97d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6989b574-d03a-4106-a7f2-671a932ce49b/resourceGroups/asa-woca-rg/providers/Microsoft.Synapse/workspaces/asa-woca-wsp/bigDataPools/wocasparkpool",
						"name": "wocasparkpool",
						"type": "Spark",
						"endpoint": "https://asa-woca-wsp.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/wocasparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Set the folder paths"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"#Set the folder paths so that it can be used later. \r\n",
							"bronze_folder_path = 'abfss://woca-data@asawocastaccdl.dfs.core.windows.net/bronze/'\r\n",
							"silver_folder_path = 'abfss://woca-data@asawocastaccdl.dfs.core.windows.net/silver/'\r\n",
							"gold_folder_path = 'abfss://woca-data@asawocastaccdl.dfs.core.windows.net/gold/'"
						],
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# we do not want it to infere datatypes\r\n",
							"# Set the spark config to be able to get the partitioned columns year and month as string\r\n",
							"# spark.conf.set(\"spark.sql.sources.partitionColumnTypeInference.enabled\", \"false\")"
						],
						"outputs": [],
						"execution_count": 52
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Read the silver data as a dataframe "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read the silver data to be processed. \r\n",
							"individual_df = spark.read.parquet(f\"{silver_folder_path}/Individual\")\r\n",
							"family_membership_df = spark.read.parquet(f\"{silver_folder_path}/FamilyMembership\")\r\n",
							"family_df = spark.read.parquet(f\"{silver_folder_path}/Family\")"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Perform Aggregations"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# import\r\n",
							"from pyspark.sql.functions import *"
						],
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### What are the individual age groups"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Perform the required aggregations of the total age_group counts\r\n",
							"idv_age_grp_cnt_df = individual_df \\\r\n",
							"                        .select(col('age_group_name').alias('age_groups')) \\\r\n",
							"                        .groupBy('age_groups') \\\r\n",
							"                        .agg(count(lit(1)).alias('counts')) \\\r\n",
							"                        .orderBy('counts') \\\r\n",
							"                        .dropna(how='any') # Drop null values"
						],
						"outputs": [],
						"execution_count": 55
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#idv_age_grp_cnt_df.show(5)"
						],
						"outputs": [],
						"execution_count": 56
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## What are the top ten cities where families hail?"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Perform the required aggregations of the total age_group counts\r\n",
							"fam_top_ten_cty_df = family_df \\\r\n",
							"                        .select(col('city').alias('cities')) \\\r\n",
							"                        .groupBy('cities') \\\r\n",
							"                        .agg(count(lit(1)).alias('top_ten')) \\\r\n",
							"                        .orderBy(col('top_ten').desc()) \\\r\n",
							"                        .dropna(how='any') \\\r\n",
							"                        .limit(10)"
						],
						"outputs": [],
						"execution_count": 57
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## How many individuals have the same family relationship ID?"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## joining two tables (Individual and Family Membership)\r\n",
							"idv_fam_rship_cnt_df = individual_df \\\r\n",
							"                    .join(family_membership_df, individual_df.individual_id == family_membership_df.individual) \\\r\n",
							"                    .select(col('family_relationship')) \\\r\n",
							"                    .groupBy('family_relationship') \\\r\n",
							"                    .agg(count(lit(1)).alias('counts')) \\\r\n",
							"                    .orderBy(col('counts').desc()) \\\r\n",
							"                    .dropna(how='any')"
						],
						"outputs": [],
						"execution_count": 58
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## What is the top five distributions of FamilyMembership in one primary contact?"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"```\r\n",
							"## What is the distribution of individual family membership?\r\n",
							"# Joining 3 tables (Individual, Family and Family Membershiop)\r\n",
							"# 1st join the Individual table with the Family table\r\n",
							"idv_fam_rship_df = individual_df \\\r\n",
							"                    .join(family_membership_df, individual_df.individual_id == family_membership_df.individual)\r\n",
							"\r\n",
							"# 2nd add the family table to the combination \r\n",
							"idv_fam_rship_fam_df = idv_fam_rship_df \\\r\n",
							"                    .join(family_df, idv_fam_rship_df.family == family_df.family_id) \\\r\n",
							"                    .select(col('family_relationship')) \\\r\n",
							"                    .groupBy('family_relationship') \\\r\n",
							"                    .agg(count(lit(1)).alias('counts')) \\\r\n",
							"                    .orderBy(col('counts').desc()) \\\r\n",
							"                    .dropna(how='any')\r\n",
							"\r\n",
							"idv_fam_rship_fam_df.printSchema()\r\n",
							"idv_fam_rship_fam_df.show(10)\r\n",
							"```"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"```\r\n",
							"## What is the distribution of individual family membership?\r\n",
							"fam_mem_dist = individual_df \\\r\n",
							"                .join(family_membership_df, individual_df.individual_id == family_membership_df.individual) \\\r\n",
							"                .groupBy('individual') \\\r\n",
							"                .agg(count(lit(1)).alias('counts')) \\\r\n",
							"                .select('counts')\\\r\n",
							"                .distinct() \\\r\n",
							"                .orderBy(col('counts').desc()) \\\r\n",
							"                .dropna(how='any')\r\n",
							"# fam_mem_dist.show()\r\n",
							"```"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"fam_prim_cont_df = family_df \\\r\n",
							"                .join(family_membership_df, family_df.family_id == family_membership_df.family, 'inner') \\\r\n",
							"                .groupBy(family_df.primary_contact) \\\r\n",
							"                .agg(count(lit(1)).alias('counts')) \\\r\n",
							"                .select('counts') \\\r\n",
							"                .distinct() \\\r\n",
							"                .orderBy(col('counts').desc()) \\\r\n",
							"                .dropna(how='any') \\\r\n",
							"                .limit(5)\r\n",
							"#fam_prim_cont_df.show()"
						],
						"outputs": [],
						"execution_count": 59
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## What is the top five distributions of individual family membership?"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## What is the distribution of individual family membership?\r\n",
							"# Joining 3 tables (Individual, Family and Family Membershiop)\r\n",
							"# 1st join the Individual table with the Family table\r\n",
							"idv_fam_rship_df = individual_df \\\r\n",
							"                    .join(family_membership_df, individual_df.individual_id == family_membership_df.individual)\r\n",
							"\r\n",
							"idv_fam_rship_df = idv_fam_rship_df.withColumnRenamed('primary_contact', 'primary_contact_2')\r\n",
							"\r\n",
							"# 2nd add the family table to the combination \r\n",
							"idv_fam_rship_fam_df = idv_fam_rship_df \\\r\n",
							"                    .join(family_df, idv_fam_rship_df.family == family_df.family_id) \\\r\n",
							"                    .dropna(how='any')\r\n",
							"\r\n",
							"#idv_fam_rship_fam_df.printSchema()\r\n",
							"#idv_fam_rship_fam_df.show(10)"
						],
						"outputs": [],
						"execution_count": 60
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create database to which we are going to write the data"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"-- Create database to which we are going to write the data\r\n",
							"-- note that the location is gold\r\n",
							"\r\n",
							"CREATE DATABASE IF NOT EXISTS woca_ldw_spark\r\n",
							"LOCATION 'abfss://woca-data@asawocastaccdl.dfs.core.windows.net/gold/';"
						],
						"outputs": [],
						"execution_count": 61
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Write data to an external table & save in the gold partition for consumption \r\n",
							"- note that the databasr woca_ldw_spark has got a default location of"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write data in delta fmt\r\n",
							"idv_age_grp_cnt_df.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"woca_ldw_spark.idv_age_grp_count\")"
						],
						"outputs": [],
						"execution_count": 62
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write data in delta fmt \r\n",
							"fam_top_ten_cty_df.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"woca_ldw_spark.fam_top_ten_cities\")"
						],
						"outputs": [],
						"execution_count": 63
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write data in delta fmt  \r\n",
							"idv_fam_rship_cnt_df.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"woca_ldw_spark.idv_fam_rship_cnt_df\")"
						],
						"outputs": [],
						"execution_count": 64
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write data in delta fmt  \r\n",
							"fam_prim_cont_df.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"woca_ldw_spark.fam_prim_cont\")"
						],
						"outputs": [],
						"execution_count": 65
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write data in delta fmt  \r\n",
							"idv_fam_rship_fam_df.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"woca_ldw_spark.idv_fam_rship_fam\")"
						],
						"outputs": [],
						"execution_count": 66
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Stop the spark pool once done"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.session.stop()"
						],
						"outputs": [],
						"execution_count": 67
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/delete_gold_tbls')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "wocasparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "743944c6-8cbb-42c0-ba92-aaf738d47278"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6989b574-d03a-4106-a7f2-671a932ce49b/resourceGroups/asa-woca-rg/providers/Microsoft.Synapse/workspaces/asa-woca-wsp/bigDataPools/wocasparkpool",
						"name": "wocasparkpool",
						"type": "Spark",
						"endpoint": "https://asa-woca-wsp.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/wocasparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Delete the database"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"spark.sql(\"DROP DATABASE IF EXISTS woca_ldw_spark CASCADE\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Stop the spark pool once done"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Auto stop the spark pool\r\n",
							"mssparkutils.session.stop()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/trans_bronze_parquet_to_delta')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "wocasparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9db44dd9-e7f4-4aa1-9048-1960418f6a8c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6989b574-d03a-4106-a7f2-671a932ce49b/resourceGroups/asa-woca-rg/providers/Microsoft.Synapse/workspaces/asa-woca-wsp/bigDataPools/wocasparkpool",
						"name": "wocasparkpool",
						"type": "Spark",
						"endpoint": "https://asa-woca-wsp.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/wocasparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 1
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Convert the Bronze Folder from Parquet to Delta Lake format"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#import\r\n",
							"from delta.tables import *\r\n",
							"\r\n",
							"# traverse all the folders in the bronze path\r\n",
							"for folder in mssparkutils.fs.ls('abfss://woca-data@asawocastaccdl.dfs.core.windows.net/bronze/'):\r\n",
							"    deltaTable_individual = DeltaTable.convertToDelta(spark, f\"parquet.`{folder.path}`\")\r\n",
							"\r\n",
							"    #print(folder)\r\n",
							"    #print(folder.path)"
						],
						"outputs": [],
						"execution_count": 13
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/trans_gold_parquet_to_delta')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "wocasparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e9e8bb1e-828e-48f4-9e2c-2c98037d3e01"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6989b574-d03a-4106-a7f2-671a932ce49b/resourceGroups/asa-woca-rg/providers/Microsoft.Synapse/workspaces/asa-woca-wsp/bigDataPools/wocasparkpool",
						"name": "wocasparkpool",
						"type": "Spark",
						"endpoint": "https://asa-woca-wsp.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/wocasparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 1
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Convert the Gold Folder from Parquet to Delta Lake format"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from delta.tables import *\r\n",
							"for folder in mssparkutils.fs.ls('abfss://woca-data@asawocastaccdl.dfs.core.windows.net/gold/'):\r\n",
							"    deltaTable_individual = DeltaTable.convertToDelta(spark, f\"parquet.`{folder.path}`\")\r\n",
							"\r\n",
							"    #print(folder)\r\n",
							"    #print(folder.path)"
						],
						"outputs": [],
						"execution_count": 13
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/trans_parquet_to_delta')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "wocasparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "df7e605d-e581-4198-82bb-233a16d85731"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6989b574-d03a-4106-a7f2-671a932ce49b/resourceGroups/asa-woca-rg/providers/Microsoft.Synapse/workspaces/asa-woca-wsp/bigDataPools/wocasparkpool",
						"name": "wocasparkpool",
						"type": "Spark",
						"endpoint": "https://asa-woca-wsp.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/wocasparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 1
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Dynamic Parameters"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"folder_path = 'bronze'\r\n",
							"data_folder = 'Family'"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Converting Parquet to Delta"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from delta.tables import *\r\n",
							"# Convert unpartitioned Parquet table at path '<path-to-table>'\r\n",
							"#deltaTable_individual = DeltaTable.convertToDelta(spark, \"parquet.`abfss://woca-data@asawocastaccdl.dfs.core.windows.net/bronze/Individual`\")\r\n",
							"#deltaTable_family = DeltaTable.convertToDelta(spark, \"parquet.`abfss://woca-data@asawocastaccdl.dfs.core.windows.net/bronze/Family`\")\r\n",
							"#deltaTable_family_membership = DeltaTable.convertToDelta(spark, \"parquet.`abfss://woca-data@asawocastaccdl.dfs.core.windows.net/bronze/FamilyMembership`\")\r\n",
							"\r\n",
							"deltaTable_individual = DeltaTable.convertToDelta(spark, f\"parquet.`abfss://woca-data@asawocastaccdl.dfs.core.windows.net/{folder_path}/{data_folder}`\")\r\n",
							"#print(f\"parquet.`abfss://woca-data@asawocastaccdl.dfs.core.windows.net/bronze/{anyi}`\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 13
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/trans_silver_parquet_to_delta')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "wocasparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4267e0a1-45d4-4c59-9f39-9531cb65792d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6989b574-d03a-4106-a7f2-671a932ce49b/resourceGroups/asa-woca-rg/providers/Microsoft.Synapse/workspaces/asa-woca-wsp/bigDataPools/wocasparkpool",
						"name": "wocasparkpool",
						"type": "Spark",
						"endpoint": "https://asa-woca-wsp.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/wocasparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 1
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Convert the Silver Folder from Parquet to Delta Lake format"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#import\r\n",
							"from delta.tables import *\r\n",
							"\r\n",
							"# traverse all the folders in the bronze path\r\n",
							"for folder in mssparkutils.fs.ls('abfss://woca-data@asawocastaccdl.dfs.core.windows.net/silver/'):\r\n",
							"    deltaTable_individual = DeltaTable.convertToDelta(spark, f\"parquet.`{folder.path}`\")\r\n",
							"\r\n",
							"    #print(folder)\r\n",
							"    #print(folder.path)"
						],
						"outputs": [],
						"execution_count": 13
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wocasparkpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 5
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiaeast"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test_gold_tbls')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "wocasparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "db4fc35a-6951-4409-80ad-499b2685a0e1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6989b574-d03a-4106-a7f2-671a932ce49b/resourceGroups/asa-woca-rg/providers/Microsoft.Synapse/workspaces/asa-woca-wsp/bigDataPools/wocasparkpool",
						"name": "wocasparkpool",
						"type": "Spark",
						"endpoint": "https://asa-woca-wsp.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/wocasparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Set the folder paths"
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"#Set the folder paths so that it can be used later. \r\n",
							"bronze_folder_path = 'abfss://woca-data@asawocastaccdl.dfs.core.windows.net/bronze/'\r\n",
							"silver_folder_path = 'abfss://woca-data@asawocastaccdl.dfs.core.windows.net/silver/'\r\n",
							"gold_folder_path = 'abfss://woca-data@asawocastaccdl.dfs.core.windows.net/gold/'"
						],
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# we do not want it to infere datatypes\r\n",
							"# Set the spark config to be able to get the partitioned columns year and month as string\r\n",
							"# spark.conf.set(\"spark.sql.sources.partitionColumnTypeInference.enabled\", \"false\")"
						],
						"outputs": [],
						"execution_count": 52
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Read the silver data as a dataframe "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read the silver data to be processed. \r\n",
							"individual_df = spark.read.parquet(f\"{silver_folder_path}/Individual\")\r\n",
							"family_membership_df = spark.read.parquet(f\"{silver_folder_path}/FamilyMembership\")\r\n",
							"family_df = spark.read.parquet(f\"{silver_folder_path}/Family\")"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Perform Aggregations"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# import\r\n",
							"from pyspark.sql.functions import *"
						],
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### What are the individual age groups"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Perform the required aggregations of the total age_group counts\r\n",
							"idv_age_grp_cnt_df = individual_df \\\r\n",
							"                        .select(col('age_group_name').alias('age_groups')) \\\r\n",
							"                        .groupBy('age_groups') \\\r\n",
							"                        .agg(count(lit(1)).alias('counts')) \\\r\n",
							"                        .orderBy('counts') \\\r\n",
							"                        .dropna(how='any') # Drop null values"
						],
						"outputs": [],
						"execution_count": 55
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#idv_age_grp_cnt_df.show(5)"
						],
						"outputs": [],
						"execution_count": 56
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## What are the top ten cities where families hail?"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Perform the required aggregations of the total age_group counts\r\n",
							"fam_top_ten_cty_df = family_df \\\r\n",
							"                        .select(col('city').alias('cities')) \\\r\n",
							"                        .groupBy('cities') \\\r\n",
							"                        .agg(count(lit(1)).alias('top_ten')) \\\r\n",
							"                        .orderBy(col('top_ten').desc()) \\\r\n",
							"                        .dropna(how='any') \\\r\n",
							"                        .limit(10)"
						],
						"outputs": [],
						"execution_count": 57
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## How many individuals have the same family relationship ID?"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## joining two tables (Individual and Family Membership)\r\n",
							"idv_fam_rship_cnt_df = individual_df \\\r\n",
							"                    .join(family_membership_df, individual_df.individual_id == family_membership_df.individual) \\\r\n",
							"                    .select(col('family_relationship')) \\\r\n",
							"                    .groupBy('family_relationship') \\\r\n",
							"                    .agg(count(lit(1)).alias('counts')) \\\r\n",
							"                    .orderBy(col('counts').desc()) \\\r\n",
							"                    .dropna(how='any')"
						],
						"outputs": [],
						"execution_count": 58
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## What is the top five distributions of FamilyMembership in one primary contact?"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"```\r\n",
							"## What is the distribution of individual family membership?\r\n",
							"# Joining 3 tables (Individual, Family and Family Membershiop)\r\n",
							"# 1st join the Individual table with the Family table\r\n",
							"idv_fam_rship_df = individual_df \\\r\n",
							"                    .join(family_membership_df, individual_df.individual_id == family_membership_df.individual)\r\n",
							"\r\n",
							"# 2nd add the family table to the combination \r\n",
							"idv_fam_rship_fam_df = idv_fam_rship_df \\\r\n",
							"                    .join(family_df, idv_fam_rship_df.family == family_df.family_id) \\\r\n",
							"                    .select(col('family_relationship')) \\\r\n",
							"                    .groupBy('family_relationship') \\\r\n",
							"                    .agg(count(lit(1)).alias('counts')) \\\r\n",
							"                    .orderBy(col('counts').desc()) \\\r\n",
							"                    .dropna(how='any')\r\n",
							"\r\n",
							"idv_fam_rship_fam_df.printSchema()\r\n",
							"idv_fam_rship_fam_df.show(10)\r\n",
							"```"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"```\r\n",
							"## What is the distribution of individual family membership?\r\n",
							"fam_mem_dist = individual_df \\\r\n",
							"                .join(family_membership_df, individual_df.individual_id == family_membership_df.individual) \\\r\n",
							"                .groupBy('individual') \\\r\n",
							"                .agg(count(lit(1)).alias('counts')) \\\r\n",
							"                .select('counts')\\\r\n",
							"                .distinct() \\\r\n",
							"                .orderBy(col('counts').desc()) \\\r\n",
							"                .dropna(how='any')\r\n",
							"# fam_mem_dist.show()\r\n",
							"```"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"fam_prim_cont_df = family_df \\\r\n",
							"                .join(family_membership_df, family_df.family_id == family_membership_df.family, 'inner') \\\r\n",
							"                .groupBy(family_df.primary_contact) \\\r\n",
							"                .agg(count(lit(1)).alias('counts')) \\\r\n",
							"                .select('counts') \\\r\n",
							"                .distinct() \\\r\n",
							"                .orderBy(col('counts').desc()) \\\r\n",
							"                .dropna(how='any') \\\r\n",
							"                .limit(5)\r\n",
							"#fam_prim_cont_df.show()"
						],
						"outputs": [],
						"execution_count": 59
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## What is the top five distributions of individual family membership?"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## What is the distribution of individual family membership?\r\n",
							"# Joining 3 tables (Individual, Family and Family Membershiop)\r\n",
							"# 1st join the Individual table with the Family table\r\n",
							"idv_fam_rship_df = individual_df \\\r\n",
							"                    .join(family_membership_df, individual_df.individual_id == family_membership_df.individual)\r\n",
							"\r\n",
							"idv_fam_rship_df = idv_fam_rship_df.withColumnRenamed('primary_contact', 'primary_contact_2')\r\n",
							"\r\n",
							"# 2nd add the family table to the combination \r\n",
							"idv_fam_rship_fam_df = idv_fam_rship_df \\\r\n",
							"                    .join(family_df, idv_fam_rship_df.family == family_df.family_id) \\\r\n",
							"                    .dropna(how='any')\r\n",
							"\r\n",
							"#idv_fam_rship_fam_df.printSchema()\r\n",
							"#idv_fam_rship_fam_df.show(10)"
						],
						"outputs": [],
						"execution_count": 60
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create database to which we are going to write the data"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"-- Create database to which we are going to write the data\r\n",
							"-- note that the location is gold\r\n",
							"\r\n",
							"CREATE DATABASE IF NOT EXISTS woca_ldw_spark\r\n",
							"LOCATION 'abfss://woca-data@asawocastaccdl.dfs.core.windows.net/gold/';"
						],
						"outputs": [],
						"execution_count": 61
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Write data to an external table & save in the gold partition for consumption \r\n",
							"- note that the databasr woca_ldw_spark has got a default location of"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write data in delta fmt\r\n",
							"idv_age_grp_cnt_df.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"woca_ldw_spark.idv_age_grp_count\")"
						],
						"outputs": [],
						"execution_count": 62
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write data in delta fmt \r\n",
							"fam_top_ten_cty_df.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"woca_ldw_spark.fam_top_ten_cities\")"
						],
						"outputs": [],
						"execution_count": 63
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write data in delta fmt  \r\n",
							"idv_fam_rship_cnt_df.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"woca_ldw_spark.idv_fam_rship_cnt_df\")"
						],
						"outputs": [],
						"execution_count": 64
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write data in delta fmt  \r\n",
							"fam_prim_cont_df.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"woca_ldw_spark.fam_prim_cont\")"
						],
						"outputs": [],
						"execution_count": 65
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write data in delta fmt  \r\n",
							"idv_fam_rship_fam_df.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"woca_ldw_spark.idv_fam_rship_fam\")"
						],
						"outputs": [],
						"execution_count": 66
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Stop the spark pool once done"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.session.stop()"
						],
						"outputs": [],
						"execution_count": 67
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_woca_power_bi_wsp')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "1afce304-cd27-4d08-a0b3-269e940f82dd",
					"tenantID": "865c4c90-6099-4d1b-af3d-46fb27d6958e"
				}
			},
			"dependsOn": []
		}
	]
}